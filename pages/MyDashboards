import React, { useState, useEffect } from "react";
import { Dashboard } from "@/entities/Dashboard";
import { Purchase } from "@/entities/Purchase";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, TrendingUp, Eye, DollarSign, BarChart3 } from "lucide-react";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { format } from "date-fns";

export default function MyDashboards() {
    const [dashboards, setDashboards] = useState([]);
    const [purchases, setPurchases] = useState([]);
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [stats, setStats] = useState({
        totalSales: 0,
        totalRevenue: 0,
        totalDashboards: 0
    });

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        setLoading(true);
        try {
            const userData = await User.me();
            setUser(userData);
            
            // Load user's dashboards
            const userDashboards = await Dashboard.filter(
                { seller_email: userData.email }, 
                "-created_date"
            );
            setDashboards(userDashboards);

            // Load sales data
            const salesData = await Purchase.filter(
                { seller_email: userData.email, payment_status: "completed" }
            );
            setPurchases(salesData);

            // Calculate stats
            const totalRevenue = salesData.reduce((sum, purchase) => sum + purchase.amount_paid, 0);
            setStats({
                totalSales: salesData.length,
                totalRevenue,
                totalDashboards: userDashboards.length
            });
        } catch (error) {
            console.error("Error loading data:", error);
        }
        setLoading(false);
    };

    const categoryColors = {
        sales: "bg-blue-100 text-blue-800",
        marketing: "bg-purple-100 text-purple-800",
        finance: "bg-green-100 text-green-800",
        operations: "bg-orange-100 text-orange-800",
        hr: "bg-pink-100 text-pink-800",
        executive: "bg-indigo-100 text-indigo-800",
        retail: "bg-yellow-100 text-yellow-800",
        manufacturing: "bg-red-100 text-red-800",
        healthcare: "bg-teal-100 text-teal-800",
        education: "bg-cyan-100 text-cyan-800",
        other: "bg-gray-100 text-gray-800"
    };

    if (!user) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-8 flex items-center justify-center">
                <Card className="max-w-md w-full text-center">
                    <CardHeader>
                        <CardTitle>Login Required</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-slate-600 mb-4">Please login to manage your dashboards</p>
                        <Button onClick={() => User.loginWithRedirect(window.location.href)}>
                            Login
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    if (loading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-8">
                <div className="max-w-6xl mx-auto space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        {[...Array(3)].map((_, i) => (
                            <Card key={i} className="animate-pulse">
                                <CardHeader>
                                    <div className="h-6 bg-gray-200 rounded w-1/2"></div>
                                </CardHeader>
                                <CardContent>
                                    <div className="h-8 bg-gray-200 rounded w-1/3"></div>
                                </CardContent>
                            </Card>
                        ))}
                    </div>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-8">
            <div className="max-w-6xl mx-auto">
                <div className="flex justify-between items-center mb-8">
                    <div>
                        <h1 className="text-3xl font-bold text-slate-900 mb-2">My Dashboards</h1>
                        <p className="text-slate-600">Manage your published dashboards and track sales</p>
                    </div>
                    <Link to={createPageUrl("UploadDashboard")}>
                        <Button className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 gap-2">
                            <Plus className="w-4 h-4" />
                            Add New Dashboard
                        </Button>
                    </Link>
                </div>

                {/* Stats Cards */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <CardTitle className="text-sm font-medium text-slate-600">
                                    Total Dashboards
                                </CardTitle>
                                <BarChart3 className="w-4 h-4 text-blue-500" />
                            </div>
                        </CardHeader>
                        <CardContent className="pt-0">
                            <div className="text-2xl font-bold text-slate-900">
                                {stats.totalDashboards}
                            </div>
                        </CardContent>
                    </Card>

                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <CardTitle className="text-sm font-medium text-slate-600">
                                    Total Sales
                                </CardTitle>
                                <TrendingUp className="w-4 h-4 text-green-500" />
                            </div>
                        </CardHeader>
                        <CardContent className="pt-0">
                            <div className="text-2xl font-bold text-slate-900">
                                {stats.totalSales}
                            </div>
                        </CardContent>
                    </Card>

                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader className="pb-3">
                            <div className="flex items-center justify-between">
                                <CardTitle className="text-sm font-medium text-slate-600">
                                    Total Revenue
                                </CardTitle>
                                <DollarSign className="w-4 h-4 text-purple-500" />
                            </div>
                        </CardHeader>
                        <CardContent className="pt-0">
                            <div className="text-2xl font-bold text-slate-900">
                                ${stats.totalRevenue.toFixed(2)}
                            </div>
                        </CardContent>
                    </Card>
                </div>

                {/* Dashboards Grid */}
                {dashboards.length === 0 ? (
                    <Card className="text-center py-12">
                        <CardContent>
                            <BarChart3 className="w-16 h-16 text-slate-300 mx-auto mb-4" />
                            <h3 className="text-xl font-semibold text-slate-700 mb-2">No dashboards yet</h3>
                            <p className="text-slate-500 mb-6">Start earning by sharing your expertise with the community</p>
                            <Link to={createPageUrl("UploadDashboard")}>
                                <Button className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 gap-2">
                                    <Plus className="w-4 h-4" />
                                    Upload Your First Dashboard
                                </Button>
                            </Link>
                        </CardContent>
                    </Card>
                ) : (
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {dashboards.map((dashboard) => (
                            <Card key={dashboard.id} className="group hover:shadow-xl transition-all duration-300 bg-white/80 backdrop-blur-sm border-0 shadow-lg">
                                <div className="aspect-video bg-gradient-to-br from-slate-100 to-slate-200 rounded-t-lg overflow-hidden">
                                    {dashboard.preview_image ? (
                                        <img 
                                            src={dashboard.preview_image} 
                                            alt={dashboard.title}
                                            className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                                        />
                                    ) : (
                                        <div className="w-full h-full flex items-center justify-center">
                                            <BarChart3 className="w-12 h-12 text-slate-400" />
                                        </div>
                                    )}
                                </div>
                                <CardHeader className="pb-3">
                                    <div className="flex items-start justify-between">
                                        <CardTitle className="text-lg font-bold text-slate-900 leading-tight">
                                            {dashboard.title}
                                        </CardTitle>
                                        <Badge className={`${categoryColors[dashboard.category]} border-0 font-medium text-xs`}>
                                            {dashboard.category}
                                        </Badge>
                                    </div>
                                    <p className="text-slate-600 text-sm line-clamp-2">
                                        {dashboard.description}
                                    </p>
                                </CardHeader>
                                <CardContent className="space-y-3">
                                    <div className="flex items-center justify-between text-sm">
                                        <span className="text-slate-500">Price</span>
                                        <span className="font-bold text-slate-900">${dashboard.price}</span>
                                    </div>
                                    <div className="flex items-center justify-between text-sm">
                                        <span className="text-slate-500">Sales</span>
                                        <span className="font-semibold text-green-600">
                                            {dashboard.sales_count || 0} sold
                                        </span>
                                    </div>
                                    <div className="flex items-center justify-between text-sm">
                                        <span className="text-slate-500">Status</span>
                                        <Badge variant={dashboard.status === 'active' ? 'default' : 'secondary'}>
                                            {dashboard.status}
                                        </Badge>
                                    </div>
                                    <div className="text-xs text-slate-400">
                                        Created {format(new Date(dashboard.created_date), "MMM d, yyyy")}
                                    </div>
                                </CardContent>
                                <div className="p-6 pt-0">
                                    <Link to={createPageUrl(`DashboardDetail?id=${dashboard.id}`)}>
                                        <Button variant="outline" className="w-full gap-2 hover:bg-slate-50">
                                            <Eye className="w-4 h-4" />
                                            View Dashboard
                                        </Button>
                                    </Link>
                                </div>
                            </Card>
                        ))}
                    </div>
                )}
            </div>
        </div>
    );
}
