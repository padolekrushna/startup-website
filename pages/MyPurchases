import React, { useState, useEffect } from "react";
import { Purchase } from "@/entities/Purchase";
import { Dashboard } from "@/entities/Dashboard";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Download, Calendar, FileText, ExternalLink, ShieldCheck } from "lucide-react";
import { format } from "date-fns";
import { createPageUrl } from "@/utils";

export default function MyPurchases() {
    const [purchases, setPurchases] = useState([]);
    const [dashboards, setDashboards] = useState({});
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);

    useEffect(() => {
        loadPurchases();
    }, []);

    const loadPurchases = async () => {
        setLoading(true);
        try {
            const userData = await User.me();
            setUser(userData);
            
            const userPurchases = await Purchase.filter(
                { buyer_email: userData.email, payment_status: "completed" }, 
                "-created_date"
            );
            setPurchases(userPurchases);

            // Load dashboard details
            const allDashboards = await Dashboard.list();
            const dashboardMap = {};
            allDashboards.forEach(dashboard => {
                dashboardMap[dashboard.id] = dashboard;
            });
            setDashboards(dashboardMap);
        } catch (error) {
            console.error("Error loading purchases:", error);
            setUser(null); // Explicitly set user to null on error (not logged in)
        }
        setLoading(false);
    };

    const handleDownload = async (purchase) => {
        const dashboard = dashboards[purchase.dashboard_id];
        if (!dashboard || !dashboard.dashboard_file) return;

        // Update download count
        await Purchase.update(purchase.id, {
            download_count: (purchase.download_count || 0) + 1
        });

        // Create download link
        const link = document.createElement('a');
        link.href = dashboard.dashboard_file;
        link.download = `${dashboard.title}.pbix`;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // Refresh purchases to update download count
        loadPurchases();
    };

    if (loading) {
        return (
            <div className="p-8 bg-slate-50 min-h-full">
                <div className="max-w-4xl mx-auto space-y-6">
                    {[...Array(3)].map((_, i) => (
                        <Card key={i} className="animate-pulse bg-white">
                            <CardHeader>
                                <div className="h-6 bg-gray-200 rounded w-1/3"></div>
                            </CardHeader>
                            <CardContent>
                                <div className="h-4 bg-gray-200 rounded w-2/3 mb-2"></div>
                                <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                            </CardContent>
                        </Card>
                    ))}
                </div>
            </div>
        );
    }
    
    if (!user) {
        return (
            <div className="p-8 flex items-center justify-center bg-slate-50 min-h-full">
                <Card className="max-w-md w-full text-center p-6 border-0 shadow-xl bg-white">
                    <CardHeader>
                        <ShieldCheck className="w-16 h-16 text-blue-500 mx-auto mb-4" />
                        <CardTitle className="text-2xl">Login Required</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-slate-600 mb-6">Please login to view your purchased dashboards.</p>
                        <Button onClick={() => User.loginWithRedirect(window.location.href)} className="w-full bg-gradient-to-r from-blue-600 to-indigo-700">
                            Login / Sign Up
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="p-8 bg-slate-50 min-h-full">
            <div className="max-w-4xl mx-auto">
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-slate-900 mb-2">My Purchases</h1>
                    <p className="text-slate-600">Download and manage your purchased dashboards</p>
                </div>

                {purchases.length === 0 ? (
                    <Card className="text-center py-12 bg-white">
                        <CardContent>
                            <FileText className="w-16 h-16 text-slate-300 mx-auto mb-4" />
                            <h3 className="text-xl font-semibold text-slate-700 mb-2">No purchases yet</h3>
                            <p className="text-slate-500 mb-6">Start building your dashboard collection from our marketplace</p>
                            <Button 
                                className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800"
                                onClick={() => window.location.href = createPageUrl("Marketplace")}
                            >
                                Browse Dashboards
                            </Button>
                        </CardContent>
                    </Card>
                ) : (
                    <div className="space-y-6">
                        {purchases.map((purchase) => {
                            const dashboard = dashboards[purchase.dashboard_id];
                            if (!dashboard) return null;

                            return (
                                <Card key={purchase.id} className="border-0 shadow-lg bg-white backdrop-blur-sm">
                                    <CardHeader>
                                        <div className="flex items-start justify-between">
                                            <div>
                                                <CardTitle className="text-xl text-slate-900 mb-2">
                                                    {dashboard.title}
                                                </CardTitle>
                                                <div className="flex items-center gap-4 text-sm text-slate-500">
                                                    <span className="flex items-center gap-1">
                                                        <Calendar className="w-4 h-4" />
                                                        Purchased {format(new Date(purchase.created_date), "MMM d, yyyy")}
                                                    </span>
                                                    <span className="flex items-center gap-1">
                                                        <Download className="w-4 h-4" />
                                                        Downloaded {purchase.download_count || 0} times
                                                    </span>
                                                </div>
                                            </div>
                                            <div className="text-right">
                                                <Badge className="bg-green-100 text-green-800 mb-2">
                                                    ${purchase.amount_paid}
                                                </Badge>
                                                <div className="text-xs text-slate-500">
                                                    {purchase.transaction_id}
                                                </div>
                                            </div>
                                        </div>
                                    </CardHeader>
                                    <CardContent>
                                        <p className="text-slate-600 mb-4 line-clamp-2">
                                            {dashboard.description}
                                        </p>
                                        <div className="flex items-center gap-3">
                                            <Button
                                                onClick={() => handleDownload(purchase)}
                                                className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 gap-2"
                                            >
                                                <Download className="w-4 h-4" />
                                                Download Dashboard
                                            </Button>
                                            {dashboard.preview_image && (
                                                <Button
                                                    variant="outline"
                                                    onClick={() => window.open(dashboard.preview_image, '_blank')}
                                                    className="gap-2 border-slate-300 text-slate-700 hover:bg-slate-100"
                                                >
                                                    <ExternalLink className="w-4 h-4" />
                                                    View Preview
                                                </Button>
                                            )}
                                        </div>
                                    </CardContent>
                                </Card>
                            );
                        })}
                    </div>
                )}
            </div>
        </div>
    );
}
