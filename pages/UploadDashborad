
import React, { useState, useEffect } from "react";
import { Dashboard } from "@/entities/Dashboard";
import { User } from "@/entities/User";
import { UploadFile } from "@/integrations/Core";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { Upload, Plus, X, FileText, Image, ShieldCheck } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function UploadDashboard() {
    const [formData, setFormData] = useState({
        title: "",
        description: "",
        price: "",
        is_free: false,
        category: "",
        features: [""],
        data_sources: [""]
    });
    const [files, setFiles] = useState({
        dashboard: null,
        preview: null
    });
    const [uploading, setUploading] = useState(false);
    const navigate = useNavigate();
    const [isLoggedIn, setIsLoggedIn] = useState(false);

    useEffect(() => {
        const checkLogin = async () => {
            try {
                await User.me();
                setIsLoggedIn(true);
            } catch (e) {
                setIsLoggedIn(false);
            }
        };
        checkLogin();
    }, []);

    const categories = [
        { value: "sales", label: "Sales" },
        { value: "marketing", label: "Marketing" },
        { value: "finance", label: "Finance" },
        { value: "operations", label: "Operations" },
        { value: "hr", label: "Human Resources" },
        { value: "executive", label: "Executive" },
        { value: "retail", label: "Retail" },
        { value: "manufacturing", label: "Manufacturing" },
        { value: "healthcare", label: "Healthcare" },
        { value: "education", label: "Education" },
        { value: "other", label: "Other" }
    ];

    const handleInputChange = (field, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: value
        }));
    };

    const handleArrayFieldChange = (field, index, value) => {
        setFormData(prev => ({
            ...prev,
            [field]: prev[field].map((item, i) => i === index ? value : item)
        }));
    };

    const addArrayField = (field) => {
        setFormData(prev => ({
            ...prev,
            [field]: [...prev[field], ""]
        }));
    };

    const removeArrayField = (field, index) => {
        setFormData(prev => ({
            ...prev,
            [field]: prev[field].filter((_, i) => i !== index)
        }));
    };

    const handleFileChange = (type, file) => {
        setFiles(prev => ({
            ...prev,
            [type]: file
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setUploading(true);

        try {
            const user = await User.me();
            
            // Upload files
            const uploadPromises = [];
            
            if (files.dashboard) {
                uploadPromises.push(UploadFile({ file: files.dashboard }));
            }
            if (files.preview) {
                uploadPromises.push(UploadFile({ file: files.preview }));
            }

            const uploadResults = await Promise.all(uploadPromises);
            
            const dashboardData = {
                ...formData,
                price: formData.is_free ? 0 : parseFloat(formData.price),
                features: formData.features.filter(f => f.trim() !== ""),
                data_sources: formData.data_sources.filter(d => d.trim() !== ""),
                seller_email: user.email,
                dashboard_file: files.dashboard ? uploadResults[0].file_url : "",
                preview_image: files.preview ? uploadResults[files.dashboard ? 1 : 0].file_url : "",
                status: "active"
            };

            await Dashboard.create(dashboardData);
            navigate(createPageUrl("MyDashboards"));
        } catch (error) {
            console.error("Error uploading dashboard:", error);
        }
        setUploading(false);
    };

    if (!isLoggedIn) {
        return (
            <div className="p-8 flex items-center justify-center bg-slate-50 min-h-full">
                <Card className="max-w-md w-full text-center p-6 border-0 shadow-xl bg-white">
                    <CardHeader>
                        <ShieldCheck className="w-16 h-16 text-blue-500 mx-auto mb-4" />
                        <CardTitle className="text-2xl">Become a Seller</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <p className="text-slate-600 mb-6">Please login or create an account to start selling your dashboards.</p>
                        <Button onClick={() => User.loginWithRedirect(window.location.href)} className="w-full bg-gradient-to-r from-blue-600 to-indigo-700">
                            Login / Sign Up
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }
    
    return (
        <div className="p-8 bg-slate-50 min-h-full">
            <div className="max-w-4xl mx-auto">
                <div className="mb-8">
                    <h1 className="text-3xl font-bold text-slate-900 mb-2">Sell Your Dashboard</h1>
                    <p className="text-slate-600">Share your expertise and earn money by selling your Power BI dashboards</p>
                </div>

                <form onSubmit={handleSubmit} className="space-y-6">
                    {/* Basic Info */}
                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle>Basic Information</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <label className="block text-sm font-medium text-slate-700 mb-2">
                                    Dashboard Title *
                                </label>
                                <Input
                                    value={formData.title}
                                    onChange={(e) => handleInputChange("title", e.target.value)}
                                    placeholder="e.g., Advanced Sales Analytics Dashboard"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-slate-700 mb-2">
                                    Description *
                                </label>
                                <Textarea
                                    value={formData.description}
                                    onChange={(e) => handleInputChange("description", e.target.value)}
                                    placeholder="Describe what your dashboard does, what insights it provides, and who it's for..."
                                    rows={4}
                                    required
                                />
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-2">
                                        Price (USD) *
                                    </label>
                                    <Input
                                        type="number"
                                        min="0"
                                        step="0.01"
                                        value={formData.price}
                                        onChange={(e) => handleInputChange("price", e.target.value)}
                                        placeholder="29.99"
                                        required
                                        disabled={formData.is_free}
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-slate-700 mb-2">
                                        Category *
                                    </label>
                                    <Select value={formData.category} onValueChange={(value) => handleInputChange("category", value)} required>
                                        <SelectTrigger>
                                            <SelectValue placeholder="Select category" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {categories.map((cat) => (
                                                <SelectItem key={cat.value} value={cat.value}>
                                                    {cat.label}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>
                            </div>
                            <div className="flex items-center space-x-2 pt-2">
                                <input type="checkbox" id="is_free" checked={formData.is_free} onChange={(e) => handleInputChange("is_free", e.target.checked)} className="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-500"/>
                                <label htmlFor="is_free" className="text-sm font-medium text-slate-700">
                                    Make this dashboard free
                                </label>
                            </div>
                        </CardContent>
                    </Card>

                    {/* Features */}
                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle className="flex items-center justify-between">
                                Key Features
                                <Button
                                    type="button"
                                    variant="outline"
                                    size="sm"
                                    onClick={() => addArrayField("features")}
                                    className="gap-2"
                                >
                                    <Plus className="w-4 h-4" />
                                    Add Feature
                                </Button>
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                            {formData.features.map((feature, index) => (
                                <div key={index} className="flex gap-2">
                                    <Input
                                        value={feature}
                                        onChange={(e) => handleArrayFieldChange("features", index, e.target.value)}
                                        placeholder="e.g., Real-time sales tracking"
                                        className="flex-1"
                                    />
                                    {formData.features.length > 1 && (
                                        <Button
                                            type="button"
                                            variant="outline"
                                            size="icon"
                                            onClick={() => removeArrayField("features", index)}
                                        >
                                            <X className="w-4 h-4" />
                                        </Button>
                                    )}
                                </div>
                            ))}
                        </CardContent>
                    </Card>

                    {/* Data Sources */}
                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle className="flex items-center justify-between">
                                Compatible Data Sources
                                <Button
                                    type="button"
                                    variant="outline"
                                    size="sm"
                                    onClick={() => addArrayField("data_sources")}
                                    className="gap-2"
                                >
                                    <Plus className="w-4 h-4" />
                                    Add Source
                                </Button>
                            </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-3">
                            {formData.data_sources.map((source, index) => (
                                <div key={index} className="flex gap-2">
                                    <Input
                                        value={source}
                                        onChange={(e) => handleArrayFieldChange("data_sources", index, e.target.value)}
                                        placeholder="e.g., SQL Server, Excel, SharePoint"
                                        className="flex-1"
                                    />
                                    {formData.data_sources.length > 1 && (
                                        <Button
                                            type="button"
                                            variant="outline"
                                            size="icon"
                                            onClick={() => removeArrayField("data_sources", index)}
                                        >
                                            <X className="w-4 h-4" />
                                        </Button>
                                    )}
                                </div>
                            ))}
                        </CardContent>
                    </Card>

                    {/* File Uploads */}
                    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle>Files</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-slate-700 mb-2">
                                    Dashboard File (.pbix) *
                                </label>
                                <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center">
                                    <input
                                        type="file"
                                        accept=".pbix"
                                        onChange={(e) => handleFileChange("dashboard", e.target.files[0])}
                                        className="hidden"
                                        id="dashboard-upload"
                                        required
                                    />
                                    <label htmlFor="dashboard-upload" className="cursor-pointer">
                                        {files.dashboard ? (
                                            <div className="flex items-center justify-center gap-2 text-green-600">
                                                <FileText className="w-5 h-5" />
                                                <span>{files.dashboard.name}</span>
                                            </div>
                                        ) : (
                                            <div className="space-y-2">
                                                <Upload className="w-8 h-8 text-slate-400 mx-auto" />
                                                <p className="text-slate-600">Click to upload your .pbix file</p>
                                            </div>
                                        )}
                                    </label>
                                </div>
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-slate-700 mb-2">
                                    Preview Image (recommended)
                                </label>
                                <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center">
                                    <input
                                        type="file"
                                        accept="image/*"
                                        onChange={(e) => handleFileChange("preview", e.target.files[0])}
                                        className="hidden"
                                        id="preview-upload"
                                    />
                                    <label htmlFor="preview-upload" className="cursor-pointer">
                                        {files.preview ? (
                                            <div className="flex items-center justify-center gap-2 text-green-600">
                                                <Image className="w-5 h-5" />
                                                <span>{files.preview.name}</span>
                                            </div>
                                        ) : (
                                            <div className="space-y-2">
                                                <Image className="w-8 h-8 text-slate-400 mx-auto" />
                                                <p className="text-slate-600">Click to upload a preview image</p>
                                            </div>
                                        )}
                                    </label>
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    {/* Submit Button */}
                    <div className="flex justify-end">
                        <Button
                            type="submit"
                            disabled={uploading}
                            className="bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800 px-8 py-3 text-lg"
                        >
                            {uploading ? (
                                <>
                                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                    Publishing...
                                </>
                            ) : (
                                <>
                                    <Upload className="w-5 h-5 mr-2" />
                                    Publish Dashboard
                                </>
                            )}
                        </Button>
                    </div>
                </form>
            </div>
        </div>
    );
}
