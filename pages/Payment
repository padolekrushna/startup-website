import React, { useState, useEffect } from "react";
import { Dashboard } from "@/entities/Dashboard";
import { Purchase } from "@/entities/Purchase";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { ArrowLeft, CreditCard, Lock } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

export default function PaymentPage() {
    const [dashboard, setDashboard] = useState(null);
    const [user, setUser] = useState(null);
    const [loading, setLoading] = useState(true);
    const [processing, setProcessing] = useState(false);
    const navigate = useNavigate();

    const urlParams = new URLSearchParams(window.location.search);
    const dashboardId = urlParams.get('dashboardId');

    useEffect(() => {
        const fetchData = async () => {
            if (!dashboardId) {
                navigate(createPageUrl("Marketplace"));
                return;
            }
            try {
                const userData = await User.me();
                setUser(userData);
                const allDashboards = await Dashboard.list();
                const foundDashboard = allDashboards.find(d => d.id === dashboardId);

                if (!foundDashboard) {
                    navigate(createPageUrl("Marketplace"));
                    return;
                }
                setDashboard(foundDashboard);
            } catch (error) {
                // If not logged in, redirect to login
                User.loginWithRedirect(window.location.href);
            }
            setLoading(false);
        };
        fetchData();
    }, [dashboardId]);

    const handlePayment = async (e) => {
        e.preventDefault();
        if (!user || !dashboard) return;

        setProcessing(true);
        try {
            // Simulate payment processing delay
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const transactionId = `txn_${Date.now()}`;
            
            await Purchase.create({
                dashboard_id: dashboard.id,
                buyer_email: user.email,
                seller_email: dashboard.seller_email,
                amount_paid: dashboard.price,
                payment_status: "completed",
                transaction_id: transactionId
            });

            await Dashboard.update(dashboard.id, {
                sales_count: (dashboard.sales_count || 0) + 1
            });
            
            navigate(createPageUrl("MyPurchases"));
        } catch (error) {
            console.error("Error processing payment:", error);
            // Add user-facing error message here
        }
        setProcessing(false);
    };

    if (loading) {
        return <div className="min-h-screen flex items-center justify-center bg-slate-50">Loading...</div>;
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50 p-8 flex items-center justify-center">
            <div className="max-w-4xl w-full">
                <Button variant="outline" onClick={() => navigate(createPageUrl(`DashboardDetail?id=${dashboardId}`))} className="mb-4 gap-2">
                    <ArrowLeft className="w-4 h-4" />
                    Back to Details
                </Button>
                <div className="grid md:grid-cols-2 gap-8">
                    {/* Order Summary */}
                    <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle>Order Summary</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <div className="flex items-center gap-4 p-4 border rounded-lg bg-slate-50">
                                <img src={dashboard.preview_image} alt={dashboard.title} className="w-20 h-20 object-cover rounded-md" />
                                <div>
                                    <h3 className="font-bold">{dashboard.title}</h3>
                                    <p className="text-sm text-slate-500">{dashboard.category}</p>
                                </div>
                                <p className="ml-auto font-bold text-lg">${dashboard.price}</p>
                            </div>
                            <div className="mt-4 space-y-2 text-sm">
                                <div className="flex justify-between"><span>Subtotal</span><span>${dashboard.price}</span></div>
                                <div className="flex justify-between"><span>Taxes</span><span>$0.00</span></div>
                                <div className="flex justify-between font-bold text-base border-t pt-2 mt-2"><span>Total</span><span>${dashboard.price}</span></div>
                            </div>
                        </CardContent>
                    </Card>
                    
                    {/* Payment Form */}
                    <Card className="border-0 shadow-xl bg-white/90 backdrop-blur-sm">
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <CreditCard className="w-5 h-5" />
                                Secure Payment
                            </CardTitle>
                        </CardHeader>
                        <form onSubmit={handlePayment}>
                            <CardContent className="space-y-4">
                                <div>
                                    <label className="text-sm font-medium">Card Number</label>
                                    <Input placeholder="0000 0000 0000 0000" required />
                                </div>
                                <div>
                                    <label className="text-sm font-medium">Cardholder Name</label>
                                    <Input placeholder="John Doe" required />
                                </div>
                                <div className="flex gap-4">
                                    <div className="flex-1">
                                        <label className="text-sm font-medium">Expiry Date</label>
                                        <Input placeholder="MM/YY" required />
                                    </div>
                                    <div className="flex-1">
                                        <label className="text-sm font-medium">CVC</label>
                                        <Input placeholder="123" required />
                                    </div>
                                </div>
                            </CardContent>
                            <CardFooter className="flex-col items-stretch space-y-3">
                                <Button type="submit" disabled={processing} className="w-full h-12 text-lg bg-gradient-to-r from-blue-600 to-indigo-700 hover:from-blue-700 hover:to-indigo-800">
                                    {processing ? (
                                        <>
                                            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                                            Processing...
                                        </>
                                    ) : (
                                        `Pay $${dashboard.price}`
                                    )}
                                </Button>
                                <p className="text-xs text-slate-500 text-center flex items-center justify-center gap-1">
                                    <Lock className="w-3 h-3"/>
                                    Payments are secure and encrypted.
                                </p>
                            </CardFooter>
                        </form>
                    </Card>
                </div>
            </div>
        </div>
    );
}
